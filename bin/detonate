#!/usr/bin/env python3
'''
detcord : Action execution on hosts

Micah Martin - knif3
'''

from inspect import getmembers
import os.path
import sys
from detcord.loader import is_valid_action, run_action
from detcord.exceptions import InvalidDetfile


if not os.path.exists("detfile.py"):
    raise InvalidDetfile("Missing detfile in the current directory")
sys.path.insert(0, os.getcwd())
import detfile


def loop_actions_and_hosts(env, action_functions):
    """Loop through all the actions in the given function array
    and all the hosts in the env

    Args:
        env (dict): A dictionary that is imported from the detfile
        action_function (list): A list of action functions to run

    Returns:
        None
    """
    for host in env['hosts']:
        for action in action_functions:
            # Run the action on the host
            env['current_host'] = host
            func = getattr(detfile, action)
            run_action(func, host, env['user'], env['pass'])


def main():
    """Load a detfile and run the given actions
    Error if there is no valid detfile, error.
    If there is a detfile but no valid actions to run, print the
    available actions
    """
    # Parse the actions in the detfile
    action_functions = []
    for func in getmembers(detfile):
        # Make sure the function is decorated as an action
        if is_valid_action(func[1]):
            action_functions += [func]

    # If we have no runnable action, error out
    if not action_functions:
        raise InvalidDetfile("No runnable actions in detfile.py")

    if len(sys.argv) < 2:
        # Print valid functions that the detfile has with the docstring
        print("USAGE: {} <action>[..<action>]".format(sys.argv[0]))
        func_strings = []
        for function in action_functions:
            docstring = function[1].__doc__
            if docstring:
                docstring = docstring.strip().split('\n')[0].strip()
            else:
                docstring = "No description"
            func_strings += ["{} - {}".format(function[0], docstring)]
        print("Valid actions for this detfile are:\n\t{}".format("\n\t".join(func_strings)))
        quit()

    actions = sys.argv[1:]
    for action in actions:
        if action not in [f[0] for f in action_functions]:
            raise InvalidDetfile("Not a valid action in the detfile: {}".format(action))
    # Make sure we have set hosts for the detfile
    if not detfile.env.get("hosts", False):
        raise InvalidDetfile("No hosts specified in the detfile environment")
    # Actually run the actions
    loop_actions_and_hosts(detfile.env, actions)

if __name__ == '__main__':
    main()
